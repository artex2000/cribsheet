#GIT REFERENCE

## GIT CONFIG
Set user name
    git config --global user.name "User Name"
Set user email
    git config --global user.email "user@mail.com"

## GIT LOG
See all commits for particular file
    git log --abbrev-commit --pretty=oneline -- ./path/to/file 
See commits present in one branch but absent in another
    git log absent..present
See log in custom format
    git log -n1 --pretty=format:"%H at %cD"

## GIT RESET
Unstage file from index, but keep it modified
    git reset HEAD ./path/to/file 
Move head 3 commits back
    git reset HEAD~3 - move head three commits back

## GIT REBASE
Rebase current branch on top of base branch
    git rebase base_branch
Replay commits done on *branch3* after fork from *branch2* on *branch1*
    git rebase --onto branch1 branch2 branch3

## GIT BRANCH
Delete local branch
    git branch -d local_branch_name 
Force delete unmerged local branch
    git branch -D local_branch_name 

## GIT CHECKOUT
Undo all modifications to file
    git checkout -- ./path/to/file 
Get file from different branch
    git checkout diff_branch -- ./path/to/file 
Get branch from remote repo
    git fetch origin
    git checkout --track origin/branch_name to the same name
git checkout --track -b local_name origin/branch_name - to the different name


git pull == git fetch + git merge origin/master
git status - shows what is changed, what is staged
git push remote [what] where 
git push origin local_branch:remote_branch


git push origin --delete remote_branch_name - delete remote branch
git fetch --all --prune - remove local tracking branches when remote branch is deleted

Add local repo to new remote repo
1. On remote host create bare repo:
~# git init --bare <repo_name>.git
2. Add created remote repo to local repo
~# git remote add origin /path/to/remote/repo
3. Make initial push into remote
~# git push -u origin master

push to remote without further connection
on remote
#git init --bare name.git
on local
~git remote add tmp /path/to/remote
~git push --all tmp
~git remote remove tmp

git clone to specific dir
    git clone /path/to/repo dirname
    
git reflog - keeps track of HEAD position
so after git reset --hard <old commit> still can get back via git reset HEAD@{x}, where HEAD@{x} is ref record of head position you want to jump back
also check reflog of particular branch:
git reflog show <branch-name>

git ls-remote --get-url - show url to remote repository

git push local branch to remote:
git checkout -b local_branch
git commit -m "some changes"
git push --set-upstream origin local_branch (as a side note --set-upstream == -u)


compare files in different branches
git diff branch1 branch2 -- path/to/file

git add -N filename (register file in git database without actual adding. Useful with "git add -p filename" for files, that are not there yet)
git add -p filename (add selected parts of the file to commit: -p == --patch)
git diff --staged (check if you added correct parts)
git reset -p (to unstage incorrect parts)

git stash - save unfinished work
git stash apply - restore unfinished work
git stash apply --index (preserve staged changes)
git stash drop - delete stash
git stash list - get list of stashes
git stash pop - apply+drop together

git symbolic-ref --short -q HEAD - get branch name in script
git checkout <SHA1> - jump to particular revision (both forward and back). This puts you in detached HEAD state (similar to separate branch). Use git checkout <branch-name> to attach HEAD back.
